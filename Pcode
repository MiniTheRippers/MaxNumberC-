void Line_Notify1(String message1) ;
#include <ESP8266WiFi.h>
#include <DHT.h>
#define WIFI_SSID "Wilawanns" /////////////*************แก้
#define WIFI_PASSWORD "999999999"////////**************แก้
#define LINE_TOKEN_PIR "Tiil0jumxepUeDJ0pXqIgqtwjSVQ890hlSOne6Tq8h2"////***************แก้
#define PirPin D7
#define DHTPIN D8
#define DHTTYPE DHT11
#define trigPin D5 // trigger pin for Ultrasonic HC-SR04
#define echoPin D6 // echo pin for Ultrasonic HC-SR04
#include <Servo.h>
DHT dht(DHTPIN, DHTTYPE);
String message1 = "%E0%B9%84%E0%B8%94%E0%B9%89%E0%B8%A3%E0%B8%B1%E0%B8%9A%E0%B8%9E%E0%B8%B1%E0%B8%AA%E0%B8%94%E0%B8%B8%E0%B9%83%E0%B8%AB%E0%B8%A1%E0%B9%88";//****************แก้
bool beep_state = false;
bool send_state = false;
uint32_t ts, ts1, ts2;
Servo myservo;  
int pos = 0;    
int i = 0;

void setup() {
  Serial.begin(115200);
  Serial.println();
  pinMode(PirPin, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  myservo.attach(5);  
  //2
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  //Light
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);
  dht.begin();
  Serial.println("connecting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("connected: ");
  Serial.println(WiFi.localIP());
  delay(10000);
  Serial.println("Pir Ready!!");
  read_sensor();
  ts = ts1 = ts2 = millis();
}
void loop() {
  ts = millis();
  if (WiFi.status() == WL_CONNECTED) {
    digitalWrite(LED_BUILTIN, LOW);
  } else {
    digitalWrite(LED_BUILTIN, HIGH);
  }
  if ((ts - ts2 >= 60000) && (WiFi.status() == WL_CONNECTED)) {
    read_sensor();
  }
  if ((ts - ts1 >= 5000) && (beep_state == true)) {
    beep_state = false;
  }
  if ((digitalRead(PirPin) == HIGH) && (beep_state == false) && (WiFi.status() == WL_CONNECTED)) {
    while (digitalRead(PirPin) == HIGH) delay(100);
    Serial.println("Detect !");
    Line_Notify1(message1);
    beep_state = true;
  }
  digitalWrite(LED_BUILTIN, HIGH);

  myservo.write(0);
  float distance = (float)readUltrasonic();
  Serial.println(distance);

  if (distance <= 80)
  {
    digitalWrite(LED_BUILTIN, LOW); // Open Light

    Serial.println("go 180");
    for (pos = 0; pos < 180; pos += 1)
    {
      Serial.println(pos);
      myservo.write(pos);
      delay(10);
    }

    delay(2000);

    Serial.println("go 0");
    i = 180;
    for (pos = 0; pos < 180; pos += 1)
    {
      Serial.println(i);
      myservo.write(i);
      delay(10);

      i = i - 1;
    }
    myservo.write(0);
    Serial.println("End");
    digitalWrite(LED_BUILTIN, HIGH); // Close Light
  }

  delay(1000);

}

long readUltrasonic() {

  long duration, distance;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) / 29.1;
  if (distance < 8 {  // This is where the LED On/Off happens
    //digitalWrite(LED_BUILTIN, HIGH); // When the Red condition is met, the LED should turn off
  }
  else {
    //digitalWrite(LED_BUILTIN, LOW);
  }
  if (distance >= 200 || distance <= 0) {
    Serial.println("Out of range");
  }
  else {
    Serial.print(distance);
    Serial.println(" cm");

  }
  delay(10);
}
void Line_Notify1(String message) {
  WiFiClientSecure client;
  if (!client.connect("notify-api.line.me", 443)) {
    Serial.println("connection failed");
    delay(2000);
    return;
  }
  String req = "";
  req += "POST /api/notify HTTP/1.1\r\n";
  req += "Host: notify-api.line.me\r\n";
  req += "Authorization: Bearer " + String(LINE_TOKEN_PIR) + "\r\n";
  req += "Cache-Control: no-cache\r\n";
  req += "User-Agent: ESP8266\r\n";
  req += "Content-Type: application/x-www-form-urlencoded\r\n";
  req += "Content-Length: " + String(String("message=" + message1).length()) + "\r\n";
  req += "\r\n";
  req += "message=" + message1;
  // Serial.println(req);
  client.print(req);
  delay(20);
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      break;
    }
  }
  digitalWrite(LED_BUILTIN, HIGH);

  myservo.write(0);
  float distance = (float)readUltrasonic();
  Serial.println(distance);

  if (distance <= 80)
  {
    digitalWrite(LED_BUILTIN, LOW); // Open Light

    Serial.println("go 180");
    for (pos = 0; pos < 180; pos += 1)
    {
      Serial.println(pos);
      myservo.write(pos);
      delay(10);
    }

    delay(2000);

    Serial.println("go 0");
    i = 180;
    for (pos = 0; pos < 180; pos += 1)
    {
      Serial.println(i);
      myservo.write(i);
      delay(10);

      i = i - 1;
    }
    myservo.write(0);
    Serial.println("End");
    digitalWrite(LED_BUILTIN, HIGH); // Close Light
  }

  delay(1000);

}
void read_sensor() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.println(" *C ");
}
